<?xml version="1.0" encoding="UTF-8"?><process version="8.2.000">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="8.2.000" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="1992"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="r_scripting:execute_r" compatibility="8.1.000" expanded="true" height="124" name="WRITE_METRICS_VAL" width="90" x="179" y="34">
        <parameter key="script" value="rm_main = function(context, data)&#10;{&#10;#Library&#10;library(PRROC)&#10;&#10;#Get context information from macro&#10;validation_iteration &lt;- round(as.double(as.character(context[nrow(context), 1])), digits=0)&#10;process_name &lt;- context[nrow(context), 2]&#10;#Important, otherwise values are overwritten!!&#10;print(nrow(context))&#10;&#10;#Construct path of file &#10;path &lt;- paste(&quot;%{full_path}Results/Results_Metrics/&quot;, process_name, &quot;.csv&quot;, sep=&quot;&quot;)&#10;&#10;#Check if File exits&#10;if(file.exists(path)){&#10;  newData &lt;- read.table(file = path, header=T, sep=&quot;,&quot;)&#10;  #Delete first column, automatically added&#10;  newData$X &lt;- NULL&#10;} else {&#10;  #Create data frame&#10;  newData &lt;- as.data.frame(matrix(nrow = 14, ncol = 6))&#10;  names(newData) &lt;- c(&quot;Type&quot;, &quot;PR_AUC&quot;, &quot;ROC_AUC&quot;, &quot;PREC_AT_90_REC&quot;, &quot;PREC_AT_95_REC&quot;, &quot;PREC_AT_99_REC&quot;)&#10;&#10;  newData[1:10,2:6] &lt;- 0&#10;  &#10;  newData[1:10, 1] &lt;- c(1:10)  &#10;  newData[11, 1] &lt;- &quot;AVG&quot;&#10;  newData[12, 1] &lt;- &quot;MIN&quot;&#10;  newData[13, 1] &lt;- &quot;MAX&quot;&#10;  newData[14, 1] &lt;- &quot;SD&quot;&#10;  &#10;  #Save data frame&#10;  write.csv(newData, file = path)&#10;}&#10;&#10;#Format label and confidence values&#10;data$confidence.1. &lt;- round(as.double(as.character(data$confidence.1.)),digits = 4)&#10;data$L_INDIVITEM &lt;- round(as.double(as.character(data$L_INDIVITEM)), digits = 0)&#10;&#10;#Set  according to makro of the line&#10;pr &lt;- pr.curve(scores.class0 = data$confidence.1., weights.class0 = data$L_INDIVITEM, curve=T)&#10;roc &lt;- roc.curve(scores.class0 = data$confidence.1., weights.class0 = data$L_INDIVITEM, curve=T)&#10;&#10;prPrec &lt;- pr$curve[,1]&#10;prRec &lt;- pr$curve[,2]&#10;prProb &lt;- pr$curve[,3]&#10;&#10;#Used Metrics for MA&#10;precAt90Rec &lt;- round(x = pr$curve[which.min(abs(prRec-0.9)), 1], digits = 4)&#10;precAt95Rec &lt;- round(x = pr$curve[which.min(abs(prRec-0.95)), 1], digits = 4)&#10;precAt99Rec &lt;- round(x = pr$curve[which.min(abs(prRec-0.99)), 1], digits = 4)&#10;roc_auc &lt;- round(x = roc$auc, digits = 4)&#10;pr_auc &lt;- round(x = pr$auc.davis.goadrich, digits = 4)&#10;&#10;#Write Values&#10;newData[validation_iteration, 2] &lt;- pr_auc&#10;newData[validation_iteration, 3] &lt;- roc_auc&#10;newData[validation_iteration, 4] &lt;- precAt90Rec&#10;newData[validation_iteration, 5] &lt;- precAt95Rec&#10;newData[validation_iteration, 6] &lt;- precAt99Rec&#10;&#10;&#10;#Write metrics&#10;write.csv(newData, file = path)&#10;}&#10;&#10;"/>
      </operator>
      <connect from_port="input 1" to_op="WRITE_METRICS_VAL" to_port="input 1"/>
      <connect from_port="input 2" to_op="WRITE_METRICS_VAL" to_port="input 2"/>
      <connect from_port="input 3" to_op="WRITE_METRICS_VAL" to_port="input 3"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="source_input 2" spacing="0"/>
      <portSpacing port="source_input 3" spacing="0"/>
      <portSpacing port="source_input 4" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
    </process>
  </operator>
</process>
